{
  "name": "“E-com Assistant – Listing Generator",
  "nodes": [
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1yMtT1tg75C-FXl26os-rreVdvOmACDOd6SlJlBo4HQA",
          "mode": "list",
          "cachedResultName": "Product",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1yMtT1tg75C-FXl26os-rreVdvOmACDOd6SlJlBo4HQA/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1yMtT1tg75C-FXl26os-rreVdvOmACDOd6SlJlBo4HQA/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Price": "={{ $json[\"Price\"] }}",
            "Quantity": "={{ $json[\"Quantity\"] }}",
            "Item": "={{ $json[\"Item\"] }}"
          },
          "matchingColumns": [
            "Item"
          ],
          "schema": [
            {
              "id": "Item",
              "displayName": "Item",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Quantity",
              "displayName": "Quantity",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Price",
              "displayName": "Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -40,
        180
      ],
      "id": "3ff914ba-b0be-4f23-8db1-46fbfa0ffd3a",
      "name": "Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "SrywAXFGoquM6vBj",
          "name": "Google Sheets account 3"
        }
      }
    },
    {
      "parameters": {
        "url": "=    https://dummyjson.com/products/search?q={{ $json[\"query\"][\"q\"] }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -340,
        -40
      ],
      "id": "5cd552f3-eb8c-46d9-a22a-23956cd5900d",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "path": "search-products",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "http://localhost:3000"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -640,
        -120
      ],
      "id": "24646408-1704-484a-b53c-850702c0bb11",
      "name": "Webhook",
      "webhookId": "4697a61b-c4cb-4a90-a125-f515d4b6fec1"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        340,
        -120
      ],
      "id": "aeb4166b-8966-4c2c-ac8c-a212d42da488",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "url": "=https://openlibrary.org/search.json?q={{ $json[\"query\"][\"q\"] }}\n\n\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -340,
        -200
      ],
      "id": "c1f96358-acb9-49e1-b930-62a1f179240f",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "jsCode": "const docs = items[0].json.docs || [];\nconst query = (items[0].json.query?.q || \"\").toLowerCase();\n\n// Limit to 50 results max\nconst limitedDocs = docs\n  .filter(doc => doc.title && doc.title.toLowerCase().includes(query))\n  .slice(0, 50);\n\nfunction transformBook(doc) {\n  return {\n    id: doc.cover_edition_key || doc.key || `${Math.floor(Math.random() * 1000000)}`,\n    title: doc.title || \"Untitled Book\",\n    description: doc.author_name ? `By ${doc.author_name.join(\", \")}` : \"No description\",\n    price: parseFloat((Math.random() * 40 + 10).toFixed(2)), // $10–$50\n    rating: parseFloat((Math.random() * 2 + 3).toFixed(1)), // 3.0–5.0\n    images: doc.cover_i\n      ? [`https://covers.openlibrary.org/b/id/${doc.cover_i}-L.jpg`]\n      : [],\n    thumbnail: doc.cover_i\n      ? `https://covers.openlibrary.org/b/id/${doc.cover_i}-S.jpg`\n      : \"\",\n    returnPolicy: \"14-day return policy\",\n    minimumOrderQuantity: 1,\n    source: \"openlibrary\",\n    meta: {\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      openLibraryKey: doc.key,\n      firstPublished: doc.first_publish_year || \"N/A\"\n    },\n    reviews: [\n      {\n        rating: Math.floor(Math.random() * 5) + 1,\n        comment: \"Very interesting read!\",\n        date: new Date().toISOString(),\n        reviewerName: \"Jane Reader\",\n        reviewerEmail: \"jane.reader@example.com\"\n      }\n    ]\n  };\n}\n\nreturn limitedDocs.map(book => ({ json: transformBook(book) }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -140,
        -200
      ],
      "id": "94500153-d7af-488c-9303-4c9c074ef47f",
      "name": "Code2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        100,
        -120
      ],
      "id": "6e1cfabd-ef7a-429f-9f8f-c1eb1ac485c6",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "const products = items[0].json.products || [];\n\nfunction transformProduct(product, source = \"dummyjson\") {\n  return {\n    id: product.id || `${Math.floor(Math.random() * 1000000)}`,\n    title: product.title || \"Unnamed Product\",\n    description: product.description || \"No description\",\n    price: product.price || parseFloat((Math.random() * 50 + 5).toFixed(2)),\n    rating: product.rating || parseFloat((Math.random() * 2 + 3).toFixed(1)),\n    images: product.images || [],\n    thumbnail: product.thumbnail || (product.images ? product.images[0] : \"\"),\n    returnPolicy: \"7 days return policy\",\n    minimumOrderQuantity: 1,\n    source : \"dummyjson\", \n    meta: {\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      barcode: product.id || \"N/A\",\n      qrCode: product.id\n        ? `https://api.qrserver.com/v1/create-qr-code/?data=${product.id}`\n        : \"\"\n    },\n    reviews: [\n      {\n        rating: Math.floor(Math.random() * 5) + 1,\n        comment: \"Great product!\",\n        date: new Date().toISOString(),\n        reviewerName: \"John Doe\",\n        reviewerEmail: \"john.doe@example.com\"\n      }\n    ]\n  };\n}\n\nreturn products.map(p => ({ json: transformProduct(p, \"dummyjson\") }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -140,
        -40
      ],
      "id": "6adef7d4-2d96-45b5-9db2-521f59bd179c",
      "name": "Code3"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "product-info",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "http://localhost:3000"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -640,
        180
      ],
      "id": "6b4f2f02-1810-491f-9362-553101d56b80",
      "name": "Webhook1",
      "webhookId": "94cfa3a8-283a-4428-a0d6-dd6955dc0ef2"
    },
    {
      "parameters": {
        "respondWith": "json",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        520,
        180
      ],
      "id": "111c913d-fedc-48c9-90bc-c3d0eab1a136",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "jsCode": "// Get the items array from the incoming body\nconst items = $json.body.items || [];\n\n// Map each item to a row for Google Sheets\nreturn items.map(item => ({\n  json: {\n    Item: item.title,\n    Quantity: item.quantity,\n    Price: item.price\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -320,
        180
      ],
      "id": "faf53f83-a0a0-434e-8709-6c8fd19acb00",
      "name": "Code"
    },
    {
      "parameters": {
        "sendTo": "={{ $('Webhook1').item.json.body.mail }}",
        "subject": "Purchase",
        "emailType": "text",
        "message": "Thank you for purchasing.",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        240,
        180
      ],
      "id": "20255a3c-2f1f-427c-a26a-2856f231b275",
      "name": "Gmail1",
      "webhookId": "291ef9a6-635d-4f49-aef0-4821d70cbe07",
      "credentials": {
        "gmailOAuth2": {
          "id": "jLwfCliHqHiJRZ1J",
          "name": "Gmail account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets": {
      "main": [
        [
          {
            "node": "Gmail1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Google Sheets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail1": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6047527c-470d-4488-8075-b13c7a1b53e5",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "59838367fbd4d906ada7696188120fd33cf874142548b7e7847a21c08669bcaa"
  },
  "id": "d5HftH9ftUOmna9f",
  "tags": []
}